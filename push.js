// Load the web-push package. This package manages
// VAPID keys and sends push notifications to
// a push endpoint.
const webpush = require('web-push');


// VAPID keys only need to be generated once. Un-comment
// this code to generate a public and private VAPID key.
// Look at the console output to retrieve the keys. Place
// the keys in the .env file, then comment the code out again.
/*
const vapidKeys = webpush.generateVAPIDKeys();
console.log(vapidKeys);
*/

// Set your app's Cloud Messaging API key. This comes from
// your Firebase project under 
// Settings > Cloud Messaging > Server key
webpush.setGCMAPIKey(process.env.FCM_KEY);

// Set your app's VAPID details. The public and private keys
// are generated by the commented-out code above.
// The subject is your email address in the following format:
// mailto:example@yourdomain.org
webpush.setVapidDetails(
  process.env.VAPID_SUBJECT,
  process.env.VAPID_PUBLIC_KEY,
  process.env.VAPID_PRIVATE_KEY
);

// Create an object to represent the options for each
// push message your app will send.
const pushOptions = {
  gcmAPIKey: process.env.FCM_KEY,
  vapidDetails: {
    subject: process.env.VAPID_SUBJECT,
    publicKey: process.env.VAPID_PUBLIC_KEY,
    privateKey: process.env.VAPID_PRIVATE_KEY
  }
};

// For each subscription to your push server, send a notification.
function sendNotifications(subscriptions, notification) {
  let endpoints = Object.keys(subscriptions);
  endpoints.map((i) => {
    sendNotification(subscriptions, subscriptions[i], notification);
  });
}

// Send a notification to a subscription endpoint.
function sendNotification(subscriptions, subscription, notification) { 
  let endpoint = subscription.endpoint;
  
  // If that endpoint doesn't exist, don't bother sending 
  // a notification to it.
  // TBD: The server needs to handle dead endpoints somehow.
  if (!(subscriptions[endpoint])) {
    return false;
  }
  
  // Create an identifier for the subscription by grabbing the last 8 
  // characters of its endpoint. This is purely for
  // debugging, so that the developer can see which endpoints
  // are being notified without staring at a giant horrible URL.
  let id = endpoint.substr((endpoint.length - 8), endpoint.length);
  
  // Set the options for the notification to the object defined earlier.
  let options = Object.assign({}, pushOptions, { TTL: 9000 });
  
  // Set the payload of the notification. In this sample app, the
  // payload comes from the client, which has just requested a 
  // notification be sent to it. In real life, clients don't need
  // to request notifications for themselves and this payload
  // would be generated by the server somehow - e.g. when
  // an order has shipped or a product is on sale or something.
  let payload = JSON.stringify(notification);
  
  // Use the web-push package to send the notification. 
  // For debugging purposes, log the result to the console.
  // Use the identifier we created earlier to help debug
  // which endpoints are erroring out and which ones the 
  // server has successfully sent. This will help you to 
  // debug in the client - is the error in the client 
  // or the server?
  webpush.sendNotification(subscription, payload, options)
  .then((result) => { console.log(id, result.statusCode); })
  .catch((error) => { console.log(id, error.body); });
}

// Export functions so the main app can load and use them.
let push = {
  sendNotifications: sendNotifications,
  sendNotification: sendNotification
}

module.exports = push;
